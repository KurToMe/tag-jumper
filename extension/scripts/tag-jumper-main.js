// Generated by CoffeeScript 1.3.3
var tjump;

tjump = {};

tjump.overlay = document.createElement('div');

tjump.overlay.id = 'main-overlay';

tjump.overlay.className += 'overlay';

tjump.canvas = document.createElement('canvas');

tjump.canvas.id = 'main-canvas';

tjump.canvas.className += 'canvas';

tjump.overlay.appendChild(tjump.canvas);

tjump.ctx = tjump.canvas.getContext("2d");

document.body.appendChild(tjump.overlay);

tjump.SCALE = 30;

tjump.FRAME_RATE = 1 / 60;

tjump.VELOCITY_ITERATIONS = 10;

tjump.POSITION_ITERATIONS = 10;

tjump.GRAVITY = new Box2D.Common.Math.b2Vec2(0, 0);

tjump.WIDTH = tjump.canvas.width;

tjump.HEIGHT = tjump.canvas.height;

/*
 Converts screen points (pixels) to points the 
 physics engine works with
*/


tjump.scaleToPhys = function(x) {
  return x / tjump.SCALE;
};

/*
 Converts screen points (pixels) vector to points 
 the physics engine works with
*/


tjump.scaleVecToPhys = function(vec) {
  vec.Multiply(1 / tjump.SCALE);
  return vec;
};

/*
 Converts physics points to points the screen points
 (pixels)
*/


tjump.scaleToScreen = function(x) {
  return x * tjump.SCALE;
};

/*
# Applies a horizontal force to a body
*/


tjump.applyXForce = function(body, xForce) {
  var b2Vec2, centerPoint, force;
  b2Vec2 = Box2D.Common.Math.b2Vec2;
  centerPoint = body.GetPosition();
  force = new b2Vec2(xForce, 0);
  return body.ApplyForce(force, centerPoint);
};

/*
# Applies a vertical force to a body
*/


tjump.applyYForce = function(body, yForce) {
  var b2Vec2, centerPoint, force;
  b2Vec2 = Box2D.Common.Math.b2Vec2;
  centerPoint = body.GetPosition();
  force = new b2Vec2(0, yForce);
  return body.ApplyForce(force, centerPoint);
};

tjump.isBodyInContact = function(contact, body) {
  var bodyA, bodyB;
  bodyA = contact.GetFixtureA().GetBody();
  bodyB = contact.GetFixtureB().GetBody();
  if (bodyA === body || bodyB === body) {
    return true;
  } else {
    return false;
  }
};

/*
 Function that animates the
*/


window.requestAnimFrame = (function() {
  return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback, element) {
    return window.setTimeout(callback, 1000 / 60);
  };
})();

/*
 Creates wall boundaries fo the game
*/


tjump.createWalls = function() {
  var b2Body, b2BodyDef, b2FixtureDef, b2PolygonShape, bodyDef, bottomHeight, bottomWidth, fixDef, leftHeight, leftWidth, rightHeight, rightWidth, topHeight, topLeftHeight, topLeftWidth, topRightHeight, topRightWidth, topWidth;
  b2BodyDef = Box2D.Dynamics.b2BodyDef;
  b2Body = Box2D.Dynamics.b2Body;
  b2FixtureDef = Box2D.Dynamics.b2FixtureDef;
  b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape;
  fixDef = new b2FixtureDef;
  fixDef.density = 1.0;
  fixDef.friction = 0;
  fixDef.restitution = 0.2;
  bodyDef = new b2BodyDef;
  bodyDef.type = b2Body.b2_staticBody;
  fixDef.shape = new b2PolygonShape;
  bodyDef.position.x = 0;
  bodyDef.position.y = tjump.scaleToPhys(tjump.HEIGHT / 2);
  leftWidth = tjump.scaleToPhys(10 / 2);
  leftHeight = tjump.scaleToPhys((tjump.HEIGHT + (10 * tjump.BALL_RADIUS)) / 2);
  fixDef.shape.SetAsBox(leftWidth, leftHeight);
  tjump.leftWall = tjump.world.CreateBody(bodyDef);
  tjump.leftWall.CreateFixture(fixDef);
  bodyDef.position.x = tjump.scaleToPhys(tjump.WIDTH / 2);
  bodyDef.position.y = 0;
  topWidth = tjump.scaleToPhys(tjump.WIDTH / 2);
  topHeight = tjump.scaleToPhys(10 / 2);
  fixDef.shape.SetAsBox(topWidth, topHeight);
  tjump.world.CreateBody(bodyDef).CreateFixture(fixDef);
  bodyDef.position.x = tjump.scaleToPhys(tjump.WIDTH);
  bodyDef.position.y = tjump.scaleToPhys(tjump.HEIGHT / 2);
  rightWidth = leftWidth;
  rightHeight = leftHeight;
  fixDef.shape.SetAsBox(rightWidth, leftHeight);
  tjump.world.CreateBody(bodyDef).CreateFixture(fixDef);
  bodyDef.position.x = tjump.scaleToPhys(tjump.WIDTH / 2);
  bodyDef.position.y = tjump.scaleToPhys(tjump.HEIGHT + (5 * tjump.BALL_RADIUS));
  bottomWidth = topWidth;
  bottomHeight = topHeight;
  fixDef.shape.SetAsBox(bottomWidth, topHeight);
  tjump.bottomWall = tjump.world.CreateBody(bodyDef);
  tjump.bottomWall.CreateFixture(fixDef);
  bodyDef.position.x = tjump.scaleToPhys(1);
  bodyDef.position.y = tjump.scaleToPhys(1);
  bodyDef.angle = Math.PI / 4;
  topLeftWidth = tjump.scaleToPhys(15);
  topLeftHeight = tjump.scaleToPhys(15);
  fixDef.shape.SetAsBox(topLeftWidth, topLeftHeight);
  tjump.world.CreateBody(bodyDef).CreateFixture(fixDef);
  bodyDef.position.x = tjump.scaleToPhys(tjump.WIDTH - 1);
  bodyDef.position.y = tjump.scaleToPhys(1);
  bodyDef.angle = Math.PI / 4;
  topRightWidth = tjump.scaleToPhys(15);
  topRightHeight = tjump.scaleToPhys(15);
  fixDef.shape.SetAsBox(topRightWidth, topRightHeight);
  return tjump.world.CreateBody(bodyDef).CreateFixture(fixDef);
};

/*
 Handles the BeginContact event from the physics 
 world.
*/


tjump.beginContact = function(contact) {
  return tjump.paddleAi.beginContact(contact);
};

/*
 Initalizes everything we need to get started, should
 only be called once to set up.
*/


tjump.init = function() {
  var allowSleep, b2DebugDraw, debugDraw, listener;
  b2DebugDraw = Box2D.Dynamics.b2DebugDraw;
  allowSleep = true;
  tjump.world = new Box2D.Dynamics.b2World(tjump.GRAVITY, allowSleep);
  tjump.createWalls();
  listener = new Box2D.Dynamics.b2ContactListener;
  listener.BeginContact = tjump.beginContact;
  tjump.world.SetContactListener(listener);
  debugDraw = new b2DebugDraw();
  debugDraw.SetSprite(tjump.ctx);
  debugDraw.SetDrawScale(tjump.SCALE);
  debugDraw.SetFillAlpha(0.4);
  debugDraw.SetLineThickness(1.0);
  debugDraw.SetFlags(b2DebugDraw.e_shapeBit | b2DebugDraw.e_jointBit);
  return tjump.world.SetDebugDraw(debugDraw);
};

/*
 Does all the work we need to do at each tick of the
 game clock.
*/


tjump.update = function() {
  tjump.world.Step(tjump.FRAME_RATE, tjump.VELOCITY_ITERATIONS, tjump.POSITION_ITERATIONS);
  tjump.world.DrawDebugData();
  tjump.world.ClearForces();
  return requestAnimFrame(tjump.update);
};

tjump.init();

requestAnimFrame(tjump.update);
